{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { v4 as uuidv4 } from 'uuid';\nimport * as FileSystem from 'expo-file-system';\nvar DeviceService = function () {\n  function DeviceService() {\n    _classCallCheck(this, DeviceService);\n    this.deviceId = uuidv4();\n    this.isInitialized = false;\n    this.connectedDevices = new Map();\n    this.deviceRole = 'primary';\n    this.sessionId = null;\n    this.syncTimeOffset = 0;\n    this.networkConnection = null;\n    this.collaborationCode = null;\n  }\n  return _createClass(DeviceService, [{\n    key: \"initialize\",\n    value: function () {\n      var _initialize = _asyncToGenerator(function* () {\n        try {\n          yield this.detectDeviceCapabilities();\n          this.setupNetworking();\n          this.isInitialized = true;\n          console.log('DeviceService initialized:', this.deviceId);\n          return {\n            success: true,\n            deviceId: this.deviceId\n          };\n        } catch (error) {\n          console.error('DeviceService initialization failed:', error);\n          return {\n            success: false,\n            error: error.message\n          };\n        }\n      });\n      function initialize() {\n        return _initialize.apply(this, arguments);\n      }\n      return initialize;\n    }()\n  }, {\n    key: \"detectDeviceCapabilities\",\n    value: function () {\n      var _detectDeviceCapabilities = _asyncToGenerator(function* () {\n        this.capabilities = {\n          hasCamera: true,\n          hasMultipleCameras: true,\n          supportsHD: true,\n          supports4K: false,\n          hasLidar: false,\n          supportsProRAW: false,\n          maxVideoResolution: '1080p',\n          storageAvailable: 1000,\n          networkType: 'WiFi',\n          batteryLevel: 100,\n          memoryAvailable: 2048\n        };\n        return this.capabilities;\n      });\n      function detectDeviceCapabilities() {\n        return _detectDeviceCapabilities.apply(this, arguments);\n      }\n      return detectDeviceCapabilities;\n    }()\n  }, {\n    key: \"generateCollaborationCode\",\n    value: function generateCollaborationCode() {\n      this.collaborationCode = Math.random().toString(36).substring(2, 8).toUpperCase();\n      this.sessionId = uuidv4();\n      var pairingData = {\n        code: this.collaborationCode,\n        sessionId: this.sessionId,\n        hostDeviceId: this.deviceId,\n        hostCapabilities: this.capabilities,\n        timestamp: Date.now()\n      };\n      return {\n        collaborationCode: this.collaborationCode,\n        qrData: JSON.stringify(pairingData),\n        sessionId: this.sessionId\n      };\n    }\n  }, {\n    key: \"joinSession\",\n    value: function () {\n      var _joinSession = _asyncToGenerator(function* (qrData) {\n        try {\n          var pairingData = JSON.parse(qrData);\n          if (!pairingData.code || !pairingData.sessionId) {\n            throw new Error('Invalid collaboration code');\n          }\n          var timeElapsed = Date.now() - pairingData.timestamp;\n          if (timeElapsed > 300000) {\n            throw new Error('Collaboration code expired');\n          }\n          this.sessionId = pairingData.sessionId;\n          this.collaborationCode = pairingData.code;\n          yield this.connectToHost(pairingData.hostDeviceId);\n          return {\n            success: true,\n            sessionId: this.sessionId,\n            hostDeviceId: pairingData.hostDeviceId\n          };\n        } catch (error) {\n          console.error('Failed to join session:', error);\n          return {\n            success: false,\n            error: error.message\n          };\n        }\n      });\n      function joinSession(_x) {\n        return _joinSession.apply(this, arguments);\n      }\n      return joinSession;\n    }()\n  }, {\n    key: \"assignDeviceRole\",\n    value: function assignDeviceRole(role) {\n      var deviceId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.deviceId;\n      var validRoles = ['primary', 'secondary', 'angle_1', 'angle_2', 'angle_3', 'angle_4'];\n      if (!validRoles.includes(role)) {\n        throw new Error(`Invalid device role: ${role}`);\n      }\n      if (deviceId === this.deviceId) {\n        this.deviceRole = role;\n      }\n      var assignment = {\n        deviceId: deviceId,\n        role: role,\n        timestamp: Date.now(),\n        assignedBy: this.deviceId\n      };\n      this.broadcastToDevices('role_assignment', assignment);\n      return assignment;\n    }\n  }, {\n    key: \"autoAssignRoles\",\n    value: function autoAssignRoles() {\n      var _this = this;\n      var devices = Array.from(this.connectedDevices.values());\n      devices.push({\n        deviceId: this.deviceId,\n        capabilities: this.capabilities\n      });\n      devices.sort(function (a, b) {\n        var scoreA = _this.calculateDeviceScore(a.capabilities);\n        var scoreB = _this.calculateDeviceScore(b.capabilities);\n        return scoreB - scoreA;\n      });\n      var assignments = devices.map(function (device, index) {\n        var roles = ['primary', 'secondary', 'angle_1', 'angle_2', 'angle_3', 'angle_4'];\n        var role = roles[index] || `angle_${index}`;\n        if (device.deviceId === _this.deviceId) {\n          _this.deviceRole = role;\n        }\n        return {\n          deviceId: device.deviceId,\n          role: role,\n          score: _this.calculateDeviceScore(device.capabilities)\n        };\n      });\n      this.broadcastToDevices('auto_role_assignment', assignments);\n      return assignments;\n    }\n  }, {\n    key: \"calculateDeviceScore\",\n    value: function calculateDeviceScore(capabilities) {\n      var score = 0;\n      if (capabilities.supports4K) score += 50;\n      if (capabilities.supportsProRAW) score += 30;\n      if (capabilities.hasLidar) score += 20;\n      if (capabilities.maxVideoResolution === '1080p') score += 10;\n      if (capabilities.networkType === '5G') score += 15;\n      if (capabilities.batteryLevel > 50) score += 10;\n      score += capabilities.storageAvailable / 100;\n      score += capabilities.memoryAvailable / 100;\n      return score;\n    }\n  }, {\n    key: \"synchronizeTime\",\n    value: function () {\n      var _synchronizeTime = _asyncToGenerator(function* () {\n        var _this2 = this;\n        var startTime = Date.now();\n        var pings = Array.from(this.connectedDevices.keys()).map(function () {\n          var _ref = _asyncToGenerator(function* (deviceId) {\n            var pingStart = Date.now();\n            yield _this2.sendToDevice(deviceId, 'ping', {\n              timestamp: pingStart\n            });\n            var pingEnd = Date.now();\n            var roundTripTime = pingEnd - pingStart;\n            return {\n              deviceId: deviceId,\n              roundTripTime: roundTripTime\n            };\n          });\n          return function (_x2) {\n            return _ref.apply(this, arguments);\n          };\n        }());\n        var results = yield Promise.all(pings);\n        var avgLatency = results.reduce(function (sum, r) {\n          return sum + r.roundTripTime;\n        }, 0) / results.length;\n        this.syncTimeOffset = avgLatency / 2;\n        console.log('Time synchronization complete:', {\n          avgLatency: avgLatency + 'ms',\n          syncOffset: this.syncTimeOffset + 'ms'\n        });\n        return {\n          avgLatency: avgLatency,\n          syncOffset: this.syncTimeOffset,\n          connectedDevices: results.length\n        };\n      });\n      function synchronizeTime() {\n        return _synchronizeTime.apply(this, arguments);\n      }\n      return synchronizeTime;\n    }()\n  }, {\n    key: \"startCoordinatedRecording\",\n    value: function () {\n      var _startCoordinatedRecording = _asyncToGenerator(function* () {\n        var countdown = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;\n        if (this.deviceRole !== 'primary') {\n          throw new Error('Only primary device can start coordinated recording');\n        }\n        var recordingId = uuidv4();\n        var startTimestamp = Date.now() + countdown * 1000 + this.syncTimeOffset;\n        var recordingCommand = {\n          recordingId: recordingId,\n          startTimestamp: startTimestamp,\n          countdown: countdown,\n          command: 'start_recording'\n        };\n        this.broadcastToDevices('coordinated_recording', recordingCommand);\n        return {\n          recordingId: recordingId,\n          startTimestamp: startTimestamp,\n          countdown: countdown,\n          connectedDevices: this.connectedDevices.size\n        };\n      });\n      function startCoordinatedRecording() {\n        return _startCoordinatedRecording.apply(this, arguments);\n      }\n      return startCoordinatedRecording;\n    }()\n  }, {\n    key: \"stopCoordinatedRecording\",\n    value: function () {\n      var _stopCoordinatedRecording = _asyncToGenerator(function* (recordingId) {\n        if (this.deviceRole !== 'primary') {\n          throw new Error('Only primary device can stop coordinated recording');\n        }\n        var stopCommand = {\n          recordingId: recordingId,\n          stopTimestamp: Date.now(),\n          command: 'stop_recording'\n        };\n        this.broadcastToDevices('coordinated_recording', stopCommand);\n        return stopCommand;\n      });\n      function stopCoordinatedRecording(_x3) {\n        return _stopCoordinatedRecording.apply(this, arguments);\n      }\n      return stopCoordinatedRecording;\n    }()\n  }, {\n    key: \"setupNetworking\",\n    value: function setupNetworking() {\n      this.networkConnection = {\n        status: 'connected',\n        quality: 'excellent',\n        latency: 25,\n        bandwidth: 100\n      };\n    }\n  }, {\n    key: \"connectToHost\",\n    value: function () {\n      var _connectToHost = _asyncToGenerator(function* (hostDeviceId) {\n        var _this3 = this;\n        return new Promise(function (resolve) {\n          setTimeout(function () {\n            _this3.connectedDevices.set(hostDeviceId, {\n              deviceId: hostDeviceId,\n              role: 'primary',\n              capabilities: {},\n              connectionQuality: 'excellent',\n              lastPing: Date.now()\n            });\n            resolve({\n              success: true,\n              hostDeviceId: hostDeviceId\n            });\n          }, 1000);\n        });\n      });\n      function connectToHost(_x4) {\n        return _connectToHost.apply(this, arguments);\n      }\n      return connectToHost;\n    }()\n  }, {\n    key: \"sendToDevice\",\n    value: function () {\n      var _sendToDevice = _asyncToGenerator(function* (deviceId, type, data) {\n        console.log(`Sending ${type} to ${deviceId}:`, data);\n        return {\n          success: true,\n          deviceId: deviceId,\n          type: type,\n          data: data\n        };\n      });\n      function sendToDevice(_x5, _x6, _x7) {\n        return _sendToDevice.apply(this, arguments);\n      }\n      return sendToDevice;\n    }()\n  }, {\n    key: \"broadcastToDevices\",\n    value: function broadcastToDevices(type, data) {\n      var _this4 = this;\n      var connectedDeviceIds = Array.from(this.connectedDevices.keys());\n      console.log(`Broadcasting ${type} to ${connectedDeviceIds.length} devices:`, data);\n      return connectedDeviceIds.map(function (deviceId) {\n        return _this4.sendToDevice(deviceId, type, data);\n      });\n    }\n  }, {\n    key: \"getDevicesStatus\",\n    value: function getDevicesStatus() {\n      var devices = Array.from(this.connectedDevices.values());\n      return {\n        totalDevices: devices.length + 1,\n        primaryDevice: this.deviceRole === 'primary' ? this.deviceId : null,\n        devices: [{\n          deviceId: this.deviceId,\n          role: this.deviceRole,\n          capabilities: this.capabilities,\n          isLocal: true\n        }].concat(devices)\n      };\n    }\n  }, {\n    key: \"handleDeviceDisconnection\",\n    value: function handleDeviceDisconnection(deviceId) {\n      if (this.connectedDevices.has(deviceId)) {\n        var device = this.connectedDevices.get(deviceId);\n        this.connectedDevices.delete(deviceId);\n        console.log(`Device disconnected: ${deviceId} (${device.role})`);\n        if (device.role === 'primary' && this.connectedDevices.size > 0) {\n          this.autoAssignRoles();\n        }\n        return {\n          deviceId: deviceId,\n          role: device.role,\n          disconnected: true\n        };\n      }\n    }\n  }, {\n    key: \"disconnect\",\n    value: function () {\n      var _disconnect = _asyncToGenerator(function* () {\n        this.broadcastToDevices('device_disconnecting', {\n          deviceId: this.deviceId\n        });\n        this.connectedDevices.clear();\n        this.sessionId = null;\n        this.collaborationCode = null;\n        console.log('DeviceService disconnected');\n        return {\n          success: true\n        };\n      });\n      function disconnect() {\n        return _disconnect.apply(this, arguments);\n      }\n      return disconnect;\n    }()\n  }, {\n    key: \"startStatusMonitoring\",\n    value: function startStatusMonitoring() {\n      var _this5 = this;\n      this.statusInterval = setInterval(function () {\n        _this5.detectDeviceCapabilities();\n        _this5.checkConnectionQuality();\n        if (_this5.connectedDevices.size > 0) {\n          _this5.pingConnectedDevices();\n        }\n      }, 5000);\n    }\n  }, {\n    key: \"stopStatusMonitoring\",\n    value: function stopStatusMonitoring() {\n      if (this.statusInterval) {\n        clearInterval(this.statusInterval);\n        this.statusInterval = null;\n      }\n    }\n  }, {\n    key: \"checkConnectionQuality\",\n    value: function checkConnectionQuality() {\n      var qualities = ['excellent', 'good', 'fair', 'poor'];\n      var randomQuality = qualities[Math.floor(Math.random() * qualities.length)];\n      if (this.networkConnection) {\n        this.networkConnection.quality = randomQuality;\n        this.networkConnection.latency = randomQuality === 'excellent' ? 25 : randomQuality === 'good' ? 50 : randomQuality === 'fair' ? 100 : 200;\n      }\n    }\n  }, {\n    key: \"pingConnectedDevices\",\n    value: function () {\n      var _pingConnectedDevices = _asyncToGenerator(function* () {\n        var deviceIds = Array.from(this.connectedDevices.keys());\n        for (var deviceId of deviceIds) {\n          try {\n            yield this.sendToDevice(deviceId, 'ping', {\n              timestamp: Date.now()\n            });\n            var device = this.connectedDevices.get(deviceId);\n            if (device) {\n              device.lastPing = Date.now();\n            }\n          } catch (error) {\n            console.error(`Failed to ping device ${deviceId}:`, error);\n            this.handleDeviceDisconnection(deviceId);\n          }\n        }\n      });\n      function pingConnectedDevices() {\n        return _pingConnectedDevices.apply(this, arguments);\n      }\n      return pingConnectedDevices;\n    }()\n  }]);\n}();\nexport var deviceService = new DeviceService();\nexport default DeviceService;","map":{"version":3,"names":["v4","uuidv4","FileSystem","DeviceService","_classCallCheck","deviceId","isInitialized","connectedDevices","Map","deviceRole","sessionId","syncTimeOffset","networkConnection","collaborationCode","_createClass","key","value","_initialize","_asyncToGenerator","detectDeviceCapabilities","setupNetworking","console","log","success","error","message","initialize","apply","arguments","_detectDeviceCapabilities","capabilities","hasCamera","hasMultipleCameras","supportsHD","supports4K","hasLidar","supportsProRAW","maxVideoResolution","storageAvailable","networkType","batteryLevel","memoryAvailable","generateCollaborationCode","Math","random","toString","substring","toUpperCase","pairingData","code","hostDeviceId","hostCapabilities","timestamp","Date","now","qrData","JSON","stringify","_joinSession","parse","Error","timeElapsed","connectToHost","joinSession","_x","assignDeviceRole","role","length","undefined","validRoles","includes","assignment","assignedBy","broadcastToDevices","autoAssignRoles","_this","devices","Array","from","values","push","sort","a","b","scoreA","calculateDeviceScore","scoreB","assignments","map","device","index","roles","score","_synchronizeTime","_this2","startTime","pings","keys","_ref","pingStart","sendToDevice","pingEnd","roundTripTime","_x2","results","Promise","all","avgLatency","reduce","sum","r","syncOffset","synchronizeTime","_startCoordinatedRecording","countdown","recordingId","startTimestamp","recordingCommand","command","size","startCoordinatedRecording","_stopCoordinatedRecording","stopCommand","stopTimestamp","stopCoordinatedRecording","_x3","status","quality","latency","bandwidth","_connectToHost","_this3","resolve","setTimeout","set","connectionQuality","lastPing","_x4","_sendToDevice","type","data","_x5","_x6","_x7","_this4","connectedDeviceIds","getDevicesStatus","totalDevices","primaryDevice","isLocal","concat","handleDeviceDisconnection","has","get","delete","disconnected","_disconnect","clear","disconnect","startStatusMonitoring","_this5","statusInterval","setInterval","checkConnectionQuality","pingConnectedDevices","stopStatusMonitoring","clearInterval","qualities","randomQuality","floor","_pingConnectedDevices","deviceIds","deviceService"],"sources":["/workspace/MakeAScene/lib/multiDevice/deviceService.js"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport * as FileSystem from 'expo-file-system';\n\n// Multi-Device Foundation (Week 6-8 Feature)\nclass DeviceService {\n  constructor() {\n    this.deviceId = uuidv4();\n    this.isInitialized = false;\n    this.connectedDevices = new Map();\n    this.deviceRole = 'primary'; // primary, secondary, angle_1, angle_2, etc.\n    this.sessionId = null;\n    this.syncTimeOffset = 0;\n    this.networkConnection = null;\n    this.collaborationCode = null;\n  }\n\n  // Initialize device service\n  async initialize() {\n    try {\n      // Detect device capabilities\n      await this.detectDeviceCapabilities();\n      \n      // Setup networking\n      this.setupNetworking();\n      \n      this.isInitialized = true;\n      console.log('DeviceService initialized:', this.deviceId);\n      \n      return { success: true, deviceId: this.deviceId };\n    } catch (error) {\n      console.error('DeviceService initialization failed:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  // Device Capability Detection\n  async detectDeviceCapabilities() {\n    // This would be expanded with actual device detection\n    this.capabilities = {\n      hasCamera: true,\n      hasMultipleCameras: true, // Front/back\n      supportsHD: true,\n      supports4K: false, // Detected based on device\n      hasLidar: false,\n      supportsProRAW: false,\n      maxVideoResolution: '1080p',\n      storageAvailable: 1000, // MB\n      networkType: 'WiFi', // 5G, 4G, WiFi\n      batteryLevel: 100,\n      memoryAvailable: 2048 // MB\n    };\n\n    return this.capabilities;\n  }\n\n  // QR Code Generation for Device Pairing\n  generateCollaborationCode() {\n    this.collaborationCode = Math.random().toString(36).substring(2, 8).toUpperCase();\n    this.sessionId = uuidv4();\n    \n    const pairingData = {\n      code: this.collaborationCode,\n      sessionId: this.sessionId,\n      hostDeviceId: this.deviceId,\n      hostCapabilities: this.capabilities,\n      timestamp: Date.now()\n    };\n\n    return {\n      collaborationCode: this.collaborationCode,\n      qrData: JSON.stringify(pairingData),\n      sessionId: this.sessionId\n    };\n  }\n\n  // Join existing session via QR code\n  async joinSession(qrData) {\n    try {\n      const pairingData = JSON.parse(qrData);\n      \n      // Validate pairing data\n      if (!pairingData.code || !pairingData.sessionId) {\n        throw new Error('Invalid collaboration code');\n      }\n\n      // Check if session is still valid (within 5 minutes)\n      const timeElapsed = Date.now() - pairingData.timestamp;\n      if (timeElapsed > 300000) { // 5 minutes\n        throw new Error('Collaboration code expired');\n      }\n\n      this.sessionId = pairingData.sessionId;\n      this.collaborationCode = pairingData.code;\n      \n      // Connect to host device\n      await this.connectToHost(pairingData.hostDeviceId);\n      \n      return {\n        success: true,\n        sessionId: this.sessionId,\n        hostDeviceId: pairingData.hostDeviceId\n      };\n    } catch (error) {\n      console.error('Failed to join session:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  // Device Role Assignment\n  assignDeviceRole(role, deviceId = this.deviceId) {\n    const validRoles = ['primary', 'secondary', 'angle_1', 'angle_2', 'angle_3', 'angle_4'];\n    \n    if (!validRoles.includes(role)) {\n      throw new Error(`Invalid device role: ${role}`);\n    }\n\n    if (deviceId === this.deviceId) {\n      this.deviceRole = role;\n    }\n\n    const assignment = {\n      deviceId,\n      role,\n      timestamp: Date.now(),\n      assignedBy: this.deviceId\n    };\n\n    // Broadcast role assignment to all connected devices\n    this.broadcastToDevices('role_assignment', assignment);\n\n    return assignment;\n  }\n\n  // Auto-assign roles based on device capabilities\n  autoAssignRoles() {\n    const devices = Array.from(this.connectedDevices.values());\n    devices.push({ deviceId: this.deviceId, capabilities: this.capabilities });\n\n    // Sort by capabilities (better cameras get primary roles)\n    devices.sort((a, b) => {\n      const scoreA = this.calculateDeviceScore(a.capabilities);\n      const scoreB = this.calculateDeviceScore(b.capabilities);\n      return scoreB - scoreA;\n    });\n\n    const assignments = devices.map((device, index) => {\n      const roles = ['primary', 'secondary', 'angle_1', 'angle_2', 'angle_3', 'angle_4'];\n      const role = roles[index] || `angle_${index}`;\n      \n      if (device.deviceId === this.deviceId) {\n        this.deviceRole = role;\n      }\n\n      return {\n        deviceId: device.deviceId,\n        role,\n        score: this.calculateDeviceScore(device.capabilities)\n      };\n    });\n\n    // Broadcast assignments to all devices\n    this.broadcastToDevices('auto_role_assignment', assignments);\n\n    return assignments;\n  }\n\n  // Calculate device capability score for role assignment\n  calculateDeviceScore(capabilities) {\n    let score = 0;\n    \n    if (capabilities.supports4K) score += 50;\n    if (capabilities.supportsProRAW) score += 30;\n    if (capabilities.hasLidar) score += 20;\n    if (capabilities.maxVideoResolution === '1080p') score += 10;\n    if (capabilities.networkType === '5G') score += 15;\n    if (capabilities.batteryLevel > 50) score += 10;\n    \n    score += capabilities.storageAvailable / 100; // Storage in GB\n    score += capabilities.memoryAvailable / 100; // Memory in MB\n    \n    return score;\n  }\n\n  // Time Synchronization for coordinated recording\n  async synchronizeTime() {\n    const startTime = Date.now();\n    \n    // Send ping to all devices\n    const pings = Array.from(this.connectedDevices.keys()).map(async (deviceId) => {\n      const pingStart = Date.now();\n      await this.sendToDevice(deviceId, 'ping', { timestamp: pingStart });\n      const pingEnd = Date.now();\n      const roundTripTime = pingEnd - pingStart;\n      \n      return { deviceId, roundTripTime };\n    });\n\n    const results = await Promise.all(pings);\n    \n    // Calculate average latency\n    const avgLatency = results.reduce((sum, r) => sum + r.roundTripTime, 0) / results.length;\n    this.syncTimeOffset = avgLatency / 2; // Half round-trip time\n    \n    console.log('Time synchronization complete:', {\n      avgLatency: avgLatency + 'ms',\n      syncOffset: this.syncTimeOffset + 'ms'\n    });\n\n    return {\n      avgLatency,\n      syncOffset: this.syncTimeOffset,\n      connectedDevices: results.length\n    };\n  }\n\n  // Coordinated Recording Start\n  async startCoordinatedRecording(countdown = 3) {\n    if (this.deviceRole !== 'primary') {\n      throw new Error('Only primary device can start coordinated recording');\n    }\n\n    const recordingId = uuidv4();\n    const startTimestamp = Date.now() + (countdown * 1000) + this.syncTimeOffset;\n\n    const recordingCommand = {\n      recordingId,\n      startTimestamp,\n      countdown,\n      command: 'start_recording'\n    };\n\n    // Send to all connected devices\n    this.broadcastToDevices('coordinated_recording', recordingCommand);\n\n    // Return countdown for UI\n    return {\n      recordingId,\n      startTimestamp,\n      countdown,\n      connectedDevices: this.connectedDevices.size\n    };\n  }\n\n  // Stop coordinated recording\n  async stopCoordinatedRecording(recordingId) {\n    if (this.deviceRole !== 'primary') {\n      throw new Error('Only primary device can stop coordinated recording');\n    }\n\n    const stopCommand = {\n      recordingId,\n      stopTimestamp: Date.now(),\n      command: 'stop_recording'\n    };\n\n    this.broadcastToDevices('coordinated_recording', stopCommand);\n\n    return stopCommand;\n  }\n\n  // Network Setup (WebRTC simulation)\n  setupNetworking() {\n    // In a real implementation, this would setup WebRTC peer connections\n    // For now, we'll simulate with local state management\n    this.networkConnection = {\n      status: 'connected',\n      quality: 'excellent',\n      latency: 25, // ms\n      bandwidth: 100 // Mbps\n    };\n  }\n\n  // Connect to host device\n  async connectToHost(hostDeviceId) {\n    // Simulate connection establishment\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        this.connectedDevices.set(hostDeviceId, {\n          deviceId: hostDeviceId,\n          role: 'primary',\n          capabilities: {},\n          connectionQuality: 'excellent',\n          lastPing: Date.now()\n        });\n        \n        resolve({ success: true, hostDeviceId });\n      }, 1000);\n    });\n  }\n\n  // Send message to specific device\n  async sendToDevice(deviceId, type, data) {\n    // Simulate network communication\n    console.log(`Sending ${type} to ${deviceId}:`, data);\n    \n    // In real implementation, this would use WebRTC data channels\n    return { success: true, deviceId, type, data };\n  }\n\n  // Broadcast to all connected devices\n  broadcastToDevices(type, data) {\n    const connectedDeviceIds = Array.from(this.connectedDevices.keys());\n    \n    console.log(`Broadcasting ${type} to ${connectedDeviceIds.length} devices:`, data);\n    \n    return connectedDeviceIds.map(deviceId => \n      this.sendToDevice(deviceId, type, data)\n    );\n  }\n\n  // Get connected devices status\n  getDevicesStatus() {\n    const devices = Array.from(this.connectedDevices.values());\n    \n    return {\n      totalDevices: devices.length + 1, // Include self\n      primaryDevice: this.deviceRole === 'primary' ? this.deviceId : null,\n      devices: [\n        {\n          deviceId: this.deviceId,\n          role: this.deviceRole,\n          capabilities: this.capabilities,\n          isLocal: true\n        },\n        ...devices\n      ]\n    };\n  }\n\n  // Handle device disconnection\n  handleDeviceDisconnection(deviceId) {\n    if (this.connectedDevices.has(deviceId)) {\n      const device = this.connectedDevices.get(deviceId);\n      this.connectedDevices.delete(deviceId);\n      \n      console.log(`Device disconnected: ${deviceId} (${device.role})`);\n      \n      // If primary device disconnected, reassign roles\n      if (device.role === 'primary' && this.connectedDevices.size > 0) {\n        this.autoAssignRoles();\n      }\n\n      return { deviceId, role: device.role, disconnected: true };\n    }\n  }\n\n  // Cleanup and disconnect\n  async disconnect() {\n    // Notify all devices of disconnection\n    this.broadcastToDevices('device_disconnecting', { deviceId: this.deviceId });\n    \n    // Clear connections\n    this.connectedDevices.clear();\n    this.sessionId = null;\n    this.collaborationCode = null;\n    \n    console.log('DeviceService disconnected');\n    \n    return { success: true };\n  }\n\n  // Device status monitoring\n  startStatusMonitoring() {\n    this.statusInterval = setInterval(() => {\n      // Update device capabilities\n      this.detectDeviceCapabilities();\n      \n      // Check connection quality\n      this.checkConnectionQuality();\n      \n      // Ping connected devices\n      if (this.connectedDevices.size > 0) {\n        this.pingConnectedDevices();\n      }\n    }, 5000); // Every 5 seconds\n  }\n\n  stopStatusMonitoring() {\n    if (this.statusInterval) {\n      clearInterval(this.statusInterval);\n      this.statusInterval = null;\n    }\n  }\n\n  // Check network connection quality\n  checkConnectionQuality() {\n    // Simulate network quality assessment\n    const qualities = ['excellent', 'good', 'fair', 'poor'];\n    const randomQuality = qualities[Math.floor(Math.random() * qualities.length)];\n    \n    if (this.networkConnection) {\n      this.networkConnection.quality = randomQuality;\n      this.networkConnection.latency = randomQuality === 'excellent' ? 25 : \n                                       randomQuality === 'good' ? 50 : \n                                       randomQuality === 'fair' ? 100 : 200;\n    }\n  }\n\n  // Ping connected devices to check health\n  async pingConnectedDevices() {\n    const deviceIds = Array.from(this.connectedDevices.keys());\n    \n    for (const deviceId of deviceIds) {\n      try {\n        await this.sendToDevice(deviceId, 'ping', { timestamp: Date.now() });\n        \n        // Update last ping time\n        const device = this.connectedDevices.get(deviceId);\n        if (device) {\n          device.lastPing = Date.now();\n        }\n      } catch (error) {\n        console.error(`Failed to ping device ${deviceId}:`, error);\n        this.handleDeviceDisconnection(deviceId);\n      }\n    }\n  }\n}\n\n// Export singleton instance\nexport const deviceService = new DeviceService();\n\nexport default DeviceService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}