{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport OpenAI from 'openai';\nvar openai = new OpenAI({\n  apiKey: process.env.EXPO_PUBLIC_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true\n});\nvar PRICING = {\n  'gpt-4o': {\n    input: 0.005,\n    output: 0.015\n  },\n  'gpt-4o-mini': {\n    input: 0.00015,\n    output: 0.0006\n  },\n  'dall-e-3': {\n    standard_1024: 0.04,\n    hd_1024: 0.08\n  }\n};\nexport var generateStoryPrompt = function () {\n  var _ref = _asyncToGenerator(function* (constraints) {\n    var genre = constraints.genre,\n      actorCount = constraints.actorCount,\n      location = constraints.location,\n      timeOfDay = constraints.timeOfDay,\n      experienceLevel = constraints.experienceLevel;\n    var systemPrompt = `You are a professional film director creating short scene prompts for amateur filmmakers. \n  Generate a compelling, filmable scene that:\n  - Can be completed in 60 seconds or less\n  - Requires exactly ${actorCount} actor(s)\n  - Is appropriate for ${location} filming\n  - Suits ${timeOfDay} lighting conditions\n  - Matches ${experienceLevel} skill level\n  - Follows ${genre} genre conventions\n  \n  The scene must be guaranteed filmable with smartphone cameras and minimal equipment.\n  Return ONLY a JSON object with: title, description, estimatedDuration, dialogue, blockingInstructions, requiredProps.`;\n    try {\n      var response = yield openai.chat.completions.create({\n        model: 'gpt-4o-mini',\n        messages: [{\n          role: 'system',\n          content: systemPrompt\n        }, {\n          role: 'user',\n          content: `Generate a ${genre} scene for ${actorCount} actors in ${location} during ${timeOfDay}.`\n        }],\n        temperature: 0.8,\n        max_tokens: 500,\n        response_format: {\n          type: 'json_object'\n        }\n      });\n      var generatedPrompt = JSON.parse(response.choices[0].message.content);\n      var cost = calculateTokenCost(response.usage, 'gpt-4o-mini');\n      return {\n        success: true,\n        data: _objectSpread(_objectSpread({}, generatedPrompt), {}, {\n          constraints: constraints,\n          aiModel: 'gpt-4o-mini',\n          tokensUsed: response.usage.total_tokens,\n          cost: cost\n        })\n      };\n    } catch (error) {\n      console.error('Story prompt generation failed:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  });\n  return function generateStoryPrompt(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var generateStoryboard = function () {\n  var _ref2 = _asyncToGenerator(function* (storyPrompt, constraints) {\n    var actorCount = constraints.actorCount,\n      equipment = constraints.equipment,\n      location = constraints.location;\n    var systemPrompt = `You are a professional cinematographer creating detailed shot lists for smartphone filmmaking.\n  \n  Generate 3-7 specific shots that:\n  - Are guaranteed filmable with ${equipment.join(', ')} equipment\n  - Work with ${actorCount} actor(s) in ${location}\n  - Create a complete narrative arc\n  - Include professional filming terminology\n  - Specify exact camera positions and movements\n  \n  Each shot must include: shotNumber, shotType, description, cameraPosition, actorPositions, duration, difficulty (1-5).\n  Shot types: selfie, single_handheld, two_shot_handheld, group_static, moving_tracking, cinematic_sequence.\n  \n  Return ONLY a JSON object with shots array.`;\n    try {\n      var response = yield openai.chat.completions.create({\n        model: 'gpt-4o',\n        messages: [{\n          role: 'system',\n          content: systemPrompt\n        }, {\n          role: 'user',\n          content: `Create shots for: ${storyPrompt.title}\\n${storyPrompt.description}`\n        }],\n        temperature: 0.7,\n        max_tokens: 1500,\n        response_format: {\n          type: 'json_object'\n        }\n      });\n      var storyboard = JSON.parse(response.choices[0].message.content);\n      var cost = calculateTokenCost(response.usage, 'gpt-4o');\n      return {\n        success: true,\n        data: _objectSpread(_objectSpread({}, storyboard), {}, {\n          aiModel: 'gpt-4o',\n          tokensUsed: response.usage.total_tokens,\n          cost: cost\n        })\n      };\n    } catch (error) {\n      console.error('Storyboard generation failed:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  });\n  return function generateStoryboard(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var generateSketchStoryboard = function () {\n  var _ref3 = _asyncToGenerator(function* (shotDescription, shotType) {\n    var prompt = `Professional film storyboard sketch in black and white ink style:\n  ${shotDescription}\n  \n  Shot type: ${shotType}\n  Style: Clean line art, professional storyboard aesthetic, clear composition, film industry standard.\n  Show camera angle, actor positions, and basic environment.\n  No text or dialogue bubbles.`;\n    try {\n      var response = yield openai.images.generate({\n        model: 'dall-e-3',\n        prompt: prompt,\n        size: '1024x1024',\n        quality: 'standard',\n        n: 1\n      });\n      var imageUrl = response.data[0].url;\n      var cost = PRICING['dall-e-3'].standard_1024;\n      return {\n        success: true,\n        data: {\n          imageUrl: imageUrl,\n          prompt: prompt,\n          model: 'dall-e-3',\n          cost: cost\n        }\n      };\n    } catch (error) {\n      console.error('Sketch generation failed:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  });\n  return function generateSketchStoryboard(_x4, _x5) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var validateConstraints = function validateConstraints(constraints) {\n  var actorCount = constraints.actorCount,\n    equipment = constraints.equipment,\n    location = constraints.location,\n    experienceLevel = constraints.experienceLevel;\n  var validationRules = {\n    actorCount: actorCount >= 1 && actorCount <= 8,\n    equipment: Array.isArray(equipment) && equipment.length > 0,\n    location: ['indoor', 'outdoor', 'mixed'].includes(location),\n    experienceLevel: ['beginner', 'intermediate', 'advanced'].includes(experienceLevel)\n  };\n  var violations = Object.entries(validationRules).filter(function (_ref4) {\n    var _ref5 = _slicedToArray(_ref4, 2),\n      key = _ref5[0],\n      isValid = _ref5[1];\n    return !isValid;\n  }).map(function (_ref6) {\n    var _ref7 = _slicedToArray(_ref6, 1),\n      key = _ref7[0];\n    return key;\n  });\n  return {\n    isValid: violations.length === 0,\n    violations: violations\n  };\n};\nexport var getPromptTemplate = function getPromptTemplate(genre, actorCount) {\n  var templates = {\n    horror: ['A mysterious package arrives at the door', 'Strange sounds from the basement', 'The lights keep flickering ominously', 'Something is watching from the shadows', 'An old photograph reveals a dark secret'],\n    comedy: ['A case of mistaken identity', 'Everything that can go wrong, does', 'A misunderstanding leads to chaos', 'Trying to keep a secret goes hilariously wrong', 'A simple task becomes absurdly complicated'],\n    romance: ['A chance encounter in an unexpected place', 'Competing for the same thing brings them together', 'A misunderstanding threatens their relationship', 'They must work together to solve a problem', 'A gesture speaks louder than words'],\n    drama: ['A difficult conversation that changes everything', 'Standing up for what\\'s right has consequences', 'A moment of truth reveals hidden feelings', 'Past mistakes catch up with the present', 'A decision must be made that affects everyone'],\n    action: ['Racing against time to prevent disaster', 'A chase through familiar territory', 'Protecting someone from an unseen threat', 'Escaping from a dangerous situation', 'A confrontation that has been building']\n  };\n  var genreTemplates = templates[genre] || templates.drama;\n  return genreTemplates[Math.floor(Math.random() * genreTemplates.length)];\n};\nvar calculateTokenCost = function calculateTokenCost(usage, model) {\n  var pricing = PRICING[model];\n  var inputCost = usage.prompt_tokens / 1000000 * pricing.input;\n  var outputCost = usage.completion_tokens / 1000000 * pricing.output;\n  return parseFloat((inputCost + outputCost).toFixed(4));\n};\nexport var generateAdaptivePrompt = function () {\n  var _ref8 = _asyncToGenerator(function* (constraints, userHistory) {\n    var preferredGenres = userHistory.favoriteGenres || [constraints.genre];\n    var averageActorCount = userHistory.averageActorCount || constraints.actorCount;\n    var successfulShotTypes = userHistory.preferredShotTypes || ['single_handheld'];\n    var enhancedConstraints = _objectSpread(_objectSpread({}, constraints), {}, {\n      userPreferences: {\n        preferredGenres: preferredGenres,\n        averageActorCount: averageActorCount,\n        successfulShotTypes: successfulShotTypes\n      }\n    });\n    return generateStoryPrompt(enhancedConstraints);\n  });\n  return function generateAdaptivePrompt(_x6, _x7) {\n    return _ref8.apply(this, arguments);\n  };\n}();\nexport default {\n  generateStoryPrompt: generateStoryPrompt,\n  generateStoryboard: generateStoryboard,\n  generateSketchStoryboard: generateSketchStoryboard,\n  validateConstraints: validateConstraints,\n  getPromptTemplate: getPromptTemplate,\n  generateAdaptivePrompt: generateAdaptivePrompt\n};","map":{"version":3,"names":["OpenAI","openai","apiKey","process","env","EXPO_PUBLIC_OPENAI_API_KEY","dangerouslyAllowBrowser","PRICING","input","output","standard_1024","hd_1024","generateStoryPrompt","_ref","_asyncToGenerator","constraints","genre","actorCount","location","timeOfDay","experienceLevel","systemPrompt","response","chat","completions","create","model","messages","role","content","temperature","max_tokens","response_format","type","generatedPrompt","JSON","parse","choices","message","cost","calculateTokenCost","usage","success","data","_objectSpread","aiModel","tokensUsed","total_tokens","error","console","_x","apply","arguments","generateStoryboard","_ref2","storyPrompt","equipment","join","title","description","storyboard","_x2","_x3","generateSketchStoryboard","_ref3","shotDescription","shotType","prompt","images","generate","size","quality","n","imageUrl","url","_x4","_x5","validateConstraints","validationRules","Array","isArray","length","includes","violations","Object","entries","filter","_ref4","_ref5","_slicedToArray","key","isValid","map","_ref6","_ref7","getPromptTemplate","templates","horror","comedy","romance","drama","action","genreTemplates","Math","floor","random","pricing","inputCost","prompt_tokens","outputCost","completion_tokens","parseFloat","toFixed","generateAdaptivePrompt","_ref8","userHistory","preferredGenres","favoriteGenres","averageActorCount","successfulShotTypes","preferredShotTypes","enhancedConstraints","userPreferences","_x6","_x7"],"sources":["/workspace/MakeAScene/lib/ai/aiService.js"],"sourcesContent":["import OpenAI from 'openai';\n\n// Initialize OpenAI client with 2025 configuration\nconst openai = new OpenAI({\n  apiKey: process.env.EXPO_PUBLIC_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true // For React Native\n});\n\n// 2025 Pricing from PRD\nconst PRICING = {\n  'gpt-4o': {\n    input: 0.005, // $5.00 per 1M tokens\n    output: 0.015, // $15.00 per 1M tokens\n  },\n  'gpt-4o-mini': {\n    input: 0.00015, // $0.15 per 1M tokens\n    output: 0.0006, // $0.60 per 1M tokens\n  },\n  'dall-e-3': {\n    standard_1024: 0.04, // $0.04 per image\n    hd_1024: 0.08, // $0.08 per image\n  }\n};\n\n// Auto-Generated Story Prompts (Week 1-2 Feature)\nexport const generateStoryPrompt = async (constraints) => {\n  const { genre, actorCount, location, timeOfDay, experienceLevel } = constraints;\n  \n  const systemPrompt = `You are a professional film director creating short scene prompts for amateur filmmakers. \n  Generate a compelling, filmable scene that:\n  - Can be completed in 60 seconds or less\n  - Requires exactly ${actorCount} actor(s)\n  - Is appropriate for ${location} filming\n  - Suits ${timeOfDay} lighting conditions\n  - Matches ${experienceLevel} skill level\n  - Follows ${genre} genre conventions\n  \n  The scene must be guaranteed filmable with smartphone cameras and minimal equipment.\n  Return ONLY a JSON object with: title, description, estimatedDuration, dialogue, blockingInstructions, requiredProps.`;\n\n  try {\n    const response = await openai.chat.completions.create({\n      model: 'gpt-4o-mini', // Cost-effective for prompts\n      messages: [\n        { role: 'system', content: systemPrompt },\n        { \n          role: 'user', \n          content: `Generate a ${genre} scene for ${actorCount} actors in ${location} during ${timeOfDay}.` \n        }\n      ],\n      temperature: 0.8,\n      max_tokens: 500,\n      response_format: { type: 'json_object' }\n    });\n\n    const generatedPrompt = JSON.parse(response.choices[0].message.content);\n    \n    // Calculate cost\n    const cost = calculateTokenCost(response.usage, 'gpt-4o-mini');\n    \n    return {\n      success: true,\n      data: {\n        ...generatedPrompt,\n        constraints,\n        aiModel: 'gpt-4o-mini',\n        tokensUsed: response.usage.total_tokens,\n        cost\n      }\n    };\n  } catch (error) {\n    console.error('Story prompt generation failed:', error);\n    return { success: false, error: error.message };\n  }\n};\n\n// Smart Storyboarding with Constraint Engine (Week 3-4 Feature)\nexport const generateStoryboard = async (storyPrompt, constraints) => {\n  const { actorCount, equipment, location } = constraints;\n  \n  const systemPrompt = `You are a professional cinematographer creating detailed shot lists for smartphone filmmaking.\n  \n  Generate 3-7 specific shots that:\n  - Are guaranteed filmable with ${equipment.join(', ')} equipment\n  - Work with ${actorCount} actor(s) in ${location}\n  - Create a complete narrative arc\n  - Include professional filming terminology\n  - Specify exact camera positions and movements\n  \n  Each shot must include: shotNumber, shotType, description, cameraPosition, actorPositions, duration, difficulty (1-5).\n  Shot types: selfie, single_handheld, two_shot_handheld, group_static, moving_tracking, cinematic_sequence.\n  \n  Return ONLY a JSON object with shots array.`;\n\n  try {\n    const response = await openai.chat.completions.create({\n      model: 'gpt-4o', // Higher quality for storyboarding\n      messages: [\n        { role: 'system', content: systemPrompt },\n        { \n          role: 'user', \n          content: `Create shots for: ${storyPrompt.title}\\n${storyPrompt.description}` \n        }\n      ],\n      temperature: 0.7,\n      max_tokens: 1500,\n      response_format: { type: 'json_object' }\n    });\n\n    const storyboard = JSON.parse(response.choices[0].message.content);\n    const cost = calculateTokenCost(response.usage, 'gpt-4o');\n    \n    return {\n      success: true,\n      data: {\n        ...storyboard,\n        aiModel: 'gpt-4o',\n        tokensUsed: response.usage.total_tokens,\n        cost\n      }\n    };\n  } catch (error) {\n    console.error('Storyboard generation failed:', error);\n    return { success: false, error: error.message };\n  }\n};\n\n// AI-Generated Sketch Storyboards (Week 3-5 Feature)\nexport const generateSketchStoryboard = async (shotDescription, shotType) => {\n  const prompt = `Professional film storyboard sketch in black and white ink style:\n  ${shotDescription}\n  \n  Shot type: ${shotType}\n  Style: Clean line art, professional storyboard aesthetic, clear composition, film industry standard.\n  Show camera angle, actor positions, and basic environment.\n  No text or dialogue bubbles.`;\n\n  try {\n    const response = await openai.images.generate({\n      model: 'dall-e-3',\n      prompt,\n      size: '1024x1024',\n      quality: 'standard',\n      n: 1,\n    });\n\n    const imageUrl = response.data[0].url;\n    const cost = PRICING['dall-e-3'].standard_1024;\n\n    return {\n      success: true,\n      data: {\n        imageUrl,\n        prompt,\n        model: 'dall-e-3',\n        cost\n      }\n    };\n  } catch (error) {\n    console.error('Sketch generation failed:', error);\n    return { success: false, error: error.message };\n  }\n};\n\n// Constraint Validation Engine\nexport const validateConstraints = (constraints) => {\n  const { actorCount, equipment, location, experienceLevel } = constraints;\n  \n  const validationRules = {\n    actorCount: actorCount >= 1 && actorCount <= 8,\n    equipment: Array.isArray(equipment) && equipment.length > 0,\n    location: ['indoor', 'outdoor', 'mixed'].includes(location),\n    experienceLevel: ['beginner', 'intermediate', 'advanced'].includes(experienceLevel)\n  };\n\n  const violations = Object.entries(validationRules)\n    .filter(([key, isValid]) => !isValid)\n    .map(([key]) => key);\n\n  return {\n    isValid: violations.length === 0,\n    violations\n  };\n};\n\n// Auto-Generated Prompt Templates (50+ per genre)\nexport const getPromptTemplate = (genre, actorCount) => {\n  const templates = {\n    horror: [\n      'A mysterious package arrives at the door',\n      'Strange sounds from the basement',\n      'The lights keep flickering ominously',\n      'Something is watching from the shadows',\n      'An old photograph reveals a dark secret'\n    ],\n    comedy: [\n      'A case of mistaken identity',\n      'Everything that can go wrong, does',\n      'A misunderstanding leads to chaos',\n      'Trying to keep a secret goes hilariously wrong',\n      'A simple task becomes absurdly complicated'\n    ],\n    romance: [\n      'A chance encounter in an unexpected place',\n      'Competing for the same thing brings them together',\n      'A misunderstanding threatens their relationship',\n      'They must work together to solve a problem',\n      'A gesture speaks louder than words'\n    ],\n    drama: [\n      'A difficult conversation that changes everything',\n      'Standing up for what\\'s right has consequences',\n      'A moment of truth reveals hidden feelings',\n      'Past mistakes catch up with the present',\n      'A decision must be made that affects everyone'\n    ],\n    action: [\n      'Racing against time to prevent disaster',\n      'A chase through familiar territory',\n      'Protecting someone from an unseen threat',\n      'Escaping from a dangerous situation',\n      'A confrontation that has been building'\n    ]\n  };\n\n  const genreTemplates = templates[genre] || templates.drama;\n  return genreTemplates[Math.floor(Math.random() * genreTemplates.length)];\n};\n\n// Cost calculation helper\nconst calculateTokenCost = (usage, model) => {\n  const pricing = PRICING[model];\n  const inputCost = (usage.prompt_tokens / 1000000) * pricing.input;\n  const outputCost = (usage.completion_tokens / 1000000) * pricing.output;\n  return parseFloat((inputCost + outputCost).toFixed(4));\n};\n\n// Enhanced prompt with user learning\nexport const generateAdaptivePrompt = async (constraints, userHistory) => {\n  // Analyze user preferences from history\n  const preferredGenres = userHistory.favoriteGenres || [constraints.genre];\n  const averageActorCount = userHistory.averageActorCount || constraints.actorCount;\n  const successfulShotTypes = userHistory.preferredShotTypes || ['single_handheld'];\n\n  // Enhance constraints with user preferences\n  const enhancedConstraints = {\n    ...constraints,\n    userPreferences: {\n      preferredGenres,\n      averageActorCount,\n      successfulShotTypes\n    }\n  };\n\n  return generateStoryPrompt(enhancedConstraints);\n};\n\nexport default {\n  generateStoryPrompt,\n  generateStoryboard,\n  generateSketchStoryboard,\n  validateConstraints,\n  getPromptTemplate,\n  generateAdaptivePrompt\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}